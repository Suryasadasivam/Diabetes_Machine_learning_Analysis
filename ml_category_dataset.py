# -*- coding: utf-8 -*-
"""ML Category Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gDq-jJNVxcAqrN50GvGU6N1ivjw6_Lcy
"""

pip install dataprep

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd
import statsmodels.api as sm
import plotly.express as px
from sklearn.preprocessing import OrdinalEncoder
from dataprep.eda import create_report

"""1.dataset
2.find the given dataset is supervised or unsupervised  
3.Data preprocessing- convert category to numeric using ordinalEncoder
4.data report
5.assigning dependent and indepedent column to variable
6. split and train the model
7. test the model
"""

df=pd.read_csv("/content/diabetes_prediction_dataset.csv")
df

df.gender.unique()

encode=OrdinalEncoder()
df["gender"]=encode.fit_transform(df[["gender"]])

df.gender.unique()

df.smoking_history.unique()

encode1=OrdinalEncoder()
df["smoking_history"]=encode1.fit_transform(df[["smoking_history"]])
df["smoking_history"].unique()

df.info()

df

create_report(df)

df["diabetes"].value_counts()

x=df.drop("diabetes",axis=1)
y=df["diabetes"]

x.shape,y.shape

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25)

from sklearn.tree import DecisionTreeClassifier

model=DecisionTreeClassifier().fit(x_train,y_train)
y_pred=model.predict(x_test)
y_pred

y_test

from sklearn.metrics import confusion_matrix, accuracy_score

accuracy=accuracy_score(y_test,y_pred)
accuracy

confusion=confusion_matrix(y_test,y_pred)
confusion

from sklearn.ensemble import RandomForestClassifier
model1=RandomForestClassifier().fit(x_train,y_train)
y_pred1=model1.predict(x_test)
accuracy_score(y_test,y_pred1)

from sklearn.ensemble import AdaBoostClassifier
model2=AdaBoostClassifier().fit(x_train,y_train)
y_pred2=model2.predict(x_test)
accuracy_score(y_test,y_pred2)

from sklearn.linear_model import SGDClassifier
model3=SGDClassifier().fit(x_train,y_train)
y_pred3=model3.predict(x_test)
accuracy_score(y_test,y_pred3)

from sklearn import svm
 model4=svm.SVC().fit(x_train,y_train)
 y_pred4=model4.predict(x_test)
 accuracy_score(y_test,y_pred4)

from sklearn.neighbors import KNeighborsClassifier
model5=KNeighborsClassifier().fit(x_train,y_train)
y_pred5=model5.predict(x_test)
accuracy_score(y_test,y_pred5)

